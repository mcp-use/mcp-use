name: CI

on:
  push:
    branches: [main, canary]
  pull_request:
    branches: [main, canary]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      typescript: ${{ steps.filter.outputs.typescript }}
      typescript-agent: ${{ steps.filter.outputs.typescript-agent }}
      create-mcp-use-app: ${{ steps.filter.outputs.create-mcp-use-app }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - 'libraries/python/**'
            typescript:
              - 'libraries/typescript/**'
            typescript-agent:
              - 'libraries/typescript/packages/mcp-use/src/agents/**'
              - 'libraries/typescript/packages/mcp-use/tests/integration/agent/**'
              - 'libraries/typescript/packages/mcp-use/src/observability/**'
              - 'libraries/typescript/packages/mcp-use/src/telemetry/**'
            create-mcp-use-app:
              - 'libraries/typescript/packages/create-mcp-use-app/**'

  # Python Jobs
  python-lint:
    needs: detect-changes
    if: needs.detect-changes.outputs.python == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/python
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Lint with ruff
        run: |
          ruff check .
      - name: Format check with ruff
        run: |
          ruff format --check .

  python-unit-tests:
    needs: python-lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    defaults:
      run:
        working-directory: libraries/python
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev,anthropic,openai,search,e2b]
      - name: Test with pytest
        env:
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: |
          pytest tests/unit

  python-transport-tests:
    needs: python-lint
    name: "python-transport/${{ matrix.transport }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        transport: [stdio, sse, streamable_http]
    defaults:
      run:
        working-directory: libraries/python
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          pip install uv
      - name: Install dependencies
        run: |
          uv pip install --system .[dev,anthropic,openai,search,e2b]
      - name: Run integration tests for ${{ matrix.transport }} transport
        env:
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: |
          pytest tests/integration/transports/test_${{ matrix.transport }}.py

  python-primitive-tests:
    needs: python-lint
    name: "python-primitive/${{ matrix.primitive }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        primitive:
          [
            sampling,
            tools,
            resources,
            prompts,
            elicitation,
            notifications,
            auth,
          ]
    defaults:
      run:
        working-directory: libraries/python
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          pip install uv
      - name: Install dependencies
        run: |
          uv pip install --system .[dev,anthropic,openai,search,e2b]
      - name: Run integration tests for ${{ matrix.primitive }} primitive
        env:
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: |
          pytest tests/integration/primitives/test_${{ matrix.primitive }}.py

  python-integration-tests:
    needs: python-lint
    name: "python-integration"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/python
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          pip install uv
      - name: Install dependencies
        run: |
          uv pip install --system .[dev,anthropic,openai,search,e2b]
      - name: Run other integration tests
        env:
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: |
          pytest tests/integration/others/

  python-agent-tests:
    needs: python-lint
    name: "python-agent/${{ matrix.test }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test:
          [
            agent_run,
            agent_stream,
            agent_structured_output,
            server_manager,
          ]
    defaults:
      run:
        working-directory: libraries/python
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          pip install uv
      - name: Install dependencies
        run: |
          uv pip install --system .[dev,anthropic,openai,search,e2b]
      - name: Run agent test for ${{ matrix.test }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: |
          pytest tests/integration/agent/test_${{ matrix.test }}.py


  # TypeScript Jobs
  typescript-lint:
    needs: detect-changes
    if: needs.detect-changes.outputs.typescript == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/typescript
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.6.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: libraries/typescript/pnpm-lock.yaml

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run Linter
        run: pnpm lint

  typescript-build:
    needs: typescript-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/typescript
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.6.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: libraries/typescript/pnpm-lock.yaml

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build Packages
        run: pnpm build

  typescript-test-mcp-use:
    needs: typescript-lint
    name: "typescript/mcp-use"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/typescript
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.6.1
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: libraries/typescript/pnpm-lock.yaml
      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile
      - name: Build Packages
        run: pnpm build
      - name: Run mcp-use Tests
        env:
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: pnpm --filter mcp-use test:unit --if-present

  typescript-test-inspector:
    needs: typescript-lint
    name: "typescript/inspector"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/typescript
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.6.1
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: libraries/typescript/pnpm-lock.yaml
      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile
      - name: Build Packages
        run: pnpm build
      - name: Run Inspector Tests
        env:
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: pnpm --filter @mcp-use/inspector test --if-present

  typescript-test-cli:
    needs: typescript-lint
    name: "typescript/cli"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/typescript
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.6.1
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: libraries/typescript/pnpm-lock.yaml
      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile
      - name: Build Packages
        run: pnpm build
      - name: Run CLI Tests
        env:
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: pnpm --filter @mcp-use/cli test --if-present

  # Run agent integration tests only when agent-related files change
  # This saves CI resources and avoids unnecessary API calls
  typescript-agent-integration-tests:
    needs: [detect-changes, typescript-lint]
    if: needs.detect-changes.outputs.typescript-agent == 'true'
    name: "typescript/agent-integration"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/typescript
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.6.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: libraries/typescript/pnpm-lock.yaml

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build Packages
        run: pnpm build

      - name: Run Agent Integration Tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGFUSE_PUBLIC_KEY: ${{ secrets.LANGFUSE_PUBLIC_KEY }}
          LANGFUSE_SECRET_KEY: ${{ secrets.LANGFUSE_SECRET_KEY }}
          MCP_USE_LANGFUSE: true
          MCP_USE_ANONYMIZED_TELEMETRY: false
        run: pnpm --filter mcp-use test:integration:agent

  typescript-changeset-check:
    needs: detect-changes
    if: needs.detect-changes.outputs.typescript == 'true' && github.event_name == 'pull_request' && github.base_ref != 'canary'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: libraries/typescript
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.6.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: libraries/typescript/pnpm-lock.yaml

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Check for Changesets
        run: |
          if [ -n "$(ls -A .changeset/*.md 2>/dev/null | grep -v README.md)" ]; then
            echo "✅ Changeset found"
            pnpm changeset status --since=origin/main
          else
            echo "⚠️ No changeset found. If this PR includes changes that should be published, please add a changeset:"
            echo "  pnpm changeset"
            echo ""
            echo "If this PR doesn't require a changeset (docs, tests, internal changes), you can ignore this message."
          fi

  # create-mcp-use-app Tests (only when CLI package changes)
  create-mcp-use-app-build:
    needs: [detect-changes, typescript-lint]
    if: needs.detect-changes.outputs.create-mcp-use-app == 'true'
    name: "typescript/create-mcp-use-app/build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.6.1
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: libraries/typescript/pnpm-lock.yaml
      - name: Install Dependencies
        working-directory: libraries/typescript
        run: pnpm install --no-frozen-lockfile
      - name: Build create-mcp-use-app
        working-directory: libraries/typescript/packages/create-mcp-use-app
        run: pnpm build
      - name: Pack Package
        working-directory: libraries/typescript/packages/create-mcp-use-app
        run: npm pack
      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: create-mcp-use-app-package
          path: libraries/typescript/packages/create-mcp-use-app/create-mcp-use-app-*.tgz
          retention-days: 1

  create-mcp-use-app-tests:
    needs: create-mcp-use-app-build
    name: "typescript/create-app/${{ matrix.template }}/${{ matrix.os }}/${{ matrix.pm }}${{ matrix.flag && format('/{0}', matrix.flag) || '' }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        pm: [npm, yarn, pnpm]
        template: [starter, mcp-ui, apps-sdk]
        flag: ["", "--dev"]
        exclude:
          # Only test --dev on ubuntu with npm
          - os: macos-latest
            flag: "--dev"
          - os: windows-latest
            flag: "--dev"
          - pm: yarn
            flag: "--dev"
          - pm: pnpm
            flag: "--dev"
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        if: matrix.pm == 'pnpm'
        with:
          version: 10.6.1
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Setup Yarn
        if: matrix.pm == 'yarn'
        run: corepack enable
      - name: Download Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: create-mcp-use-app-package
          path: ./package
      - name: Test CLI Creation
        run: |
          # Get package path
          if [ "${{ runner.os }}" == "Windows" ]; then
            PACKAGE_PATH=$(powershell -Command "(Get-ChildItem ./package/create-mcp-use-app-*.tgz).FullName")
          else
            PACKAGE_PATH=$(realpath ./package/create-mcp-use-app-*.tgz)
          fi

          # Run create command based on PM
          case "${{ matrix.pm }}" in
            npm)
              npx --yes --package="$PACKAGE_PATH" create-mcp-use-app test-app --template ${{ matrix.template }} ${{ matrix.flag }} --no-install
              ;;
            yarn)
              yarn dlx -p "create-mcp-use-app@file:$PACKAGE_PATH" create-mcp-use-app test-app --template ${{ matrix.template }} ${{ matrix.flag }} --no-install
              ;;
            pnpm)
              pnpm --package="$PACKAGE_PATH" dlx create-mcp-use-app test-app --template ${{ matrix.template }} ${{ matrix.flag }} --no-install
              ;;
          esac

          # Verify creation
          [ -d "test-app" ] || exit 1
          [ -f "test-app/package.json" ] || exit 1
          [ -f "test-app/index.ts" ] || exit 1
          echo "✅ Project created successfully"
